import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files

plugins {
	id 'com.github.johnrengelman.shadow' version '5.0.0'
	id 'java'
}

apply from: 'gradle/helper.gradle'


defaultTasks 'build'


group 'protocolsupport'
version '1.4.dev'


Path projectDirectoryPath = projectDir.toPath().toAbsolutePath()


sourceCompatibility = JavaVersion.VERSION_1_8

Path librariesRuntimeDirectoryPath = projectDirectoryPath.resolve("libraries_runtime")
Path librariesShadeDirectoryPath = projectDirectoryPath.resolve("libraries_shade")


task setupFolders(type: DefaultTask) {doLast{
	Files.createDirectories(librariesRuntimeDirectoryPath)
	Files.createDirectories(librariesShadeDirectoryPath)
}}


task updateRuntimeLibraries(type: UpdateLibrariesTask) {
	directory = librariesRuntimeDirectoryPath
	libraries = [
		[url: "https://papermc.io/api/v1/travertine/1.16/157/download", name: "bungeecord-1.16.2-1.jar"]
	]
}

task updateShadeLibraries(type: UpdateLibrariesTask) {
	directory = librariesShadeDirectoryPath
	libraries = []
}


sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['resources']
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly fileTree(dir: librariesRuntimeDirectoryPath, include: '*.jar')
	compile fileTree(dir: librariesShadeDirectoryPath, include: '*.jar')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'
}

compileJava {
	doFirst {
	    classpath -= configurations.compileOnly
	    classpath += configurations.compileOnly
	}

	options.encoding = 'UTF-8'
	options.incremental = false
}


shadowJar {
	from sourceSets.main.java.srcDirs
	from 'LICENSE'

	archiveName = jar.archiveName

	exclude 'META-INF/**'
	relocate 'org.apache', 'protocolsupport.libs.org.apache'
	relocate 'it.unimi.dsi.fastutil', 'protocolsupport.libs.it.unimi.dsi.fastutil'

	minimize()
}


task copyFinalJarToTarget(type: DefaultTask) {doLast{
	Path targetJarDirectory = projectDirectoryPath.resolve("target")
	Files.createDirectories(targetJarDirectory)
	java.nio.file.Files.copy(
		shadowJar.archivePath.toPath().toAbsolutePath(),
		targetJarDirectory.resolve(shadowJar.baseName + '.jar'),
		java.nio.file.StandardCopyOption.REPLACE_EXISTING
	)
}}


compileJava.dependsOn(clean)
compileJava.dependsOn(setupFolders)
compileJava.dependsOn(updateRuntimeLibraries)
compileJava.dependsOn(updateShadeLibraries)
jar.enabled = false
jar.finalizedBy(shadowJar)
shadowJar.finalizedBy(copyFinalJarToTarget)
